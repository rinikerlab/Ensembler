{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Potentials\n",
    "\n",
    "In this Notebook you can find the different Potentials, that are already implemented and can be used for your projects. Play around with the parameters to get familiar with the Potentials\n",
    "\n",
    "\n",
    "Here you also can find classical Potentials like the harmonic Oscillator or the Lennard Jones Potential."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "#if the package was not installed:\n",
    "import os, sys\n",
    "path = \"../\"\n",
    "sys.path.append(path)\n",
    "\n",
    "#Imports\n",
    "##general\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "##Ensembler\n",
    "from ensembler.potentials import OneD as potentials1D\n",
    "from ensembler.potentials import TwoD as potentials2D\n",
    "\n",
    "###Plotting:\n",
    "import ensembler.visualisation.plotPotentials as vis\n",
    "\n",
    "#params\n",
    "test_timing_with_points =100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from ensembler.potentials import OneD as potentials1D\n",
    "import ensembler.visualisation.plotPotentials as vis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classics\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Harmonic Oscillator\n",
    "\n",
    "The Harmonic Oscillator is one of the most used modelling potentials1D. Its based on hooke's law and can be used to describe obviously springs, but also covalent bonds of two atoms and many more physical relations.\n",
    "\n",
    "\n",
    "Functional:\n",
    "\n",
    "$V =  \\frac{1}{2}*k*(r - r_0)^2+V_{offset} $\n",
    "\n",
    "with:\n",
    "* $k$ force constant\n",
    "* $r_0$ optimal position (optimal covalent bond length)\n",
    "* $r$ current position (current bond length)\n",
    "* $V_{offset}$ minimal potential energy offset\n",
    "\n",
    "first partial deviation by r\n",
    "\n",
    "$\\frac{\\partial V}{\\partial r} = k*(r - r_0) $\n",
    "\n",
    "\n",
    "\n",
    "#### 1D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "calculate 100 positions: \n",
      "Wall time: 0 ns\n",
      "\n",
      "Visualization\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 243.78x150.664 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1D\n",
    "positions = np.linspace(-10,10, test_timing_with_points)\n",
    "\n",
    "V = potentials1D.harmonicOscillatorPotential()\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "calculate 100 positions: \n",
      "Wall time: 2 ms\n",
      "\n",
      "Visualization\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e9310e7d08>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 243.78x150.664 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 2D\n",
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "x_positions, y_positions = np.meshgrid(positions,positions)\n",
    "positions2D = np.array([x_positions.flatten(), y_positions.flatten()]).T\n",
    "\n",
    "V = potentials2D.harmonicOscillatorPotential()\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions2D)\n",
    "\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "plt.imshow(V.ene(positions2D).reshape([test_timing_with_points,test_timing_with_points]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "cannot reshape array of size 10000 into shape (1000,1000)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-c2cb528e6d03>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mpositions2D\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mx_positions\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_positions\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mT\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mfig\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxes\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot_2DPotential\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mV\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpositions2D\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\OneDrive - ETH Zürich\\PhD\\Code\\ensembler_public\\ensembler\\visualisation\\plotPotentials.py\u001b[0m in \u001b[0;36mplot_2DPotential\u001b[1;34m(V, positions2D, title, x_label, y_label, space_range, point_resolution, ax, show_plot, dpi, cmap)\u001b[0m\n\u001b[0;32m    173\u001b[0m     \u001b[0mV_pots\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mV\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mene\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpositions2D\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    174\u001b[0m     \u001b[0mminV\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmaxV\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mV_pots\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mV_pots\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 175\u001b[1;33m     \u001b[0mV_land\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mV_pots\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mpoint_resolution\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpoint_resolution\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    176\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    177\u001b[0m     \u001b[1;31m# make Figure\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: cannot reshape array of size 10000 into shape (1000,1000)"
     ]
    }
   ],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "x_positions, y_positions = np.meshgrid(positions,positions)\n",
    "positions2D = np.array([x_positions.flatten(), y_positions.flatten()]).T\n",
    "\n",
    "fig, axes = vis.plot_2DPotential(V, positions2D)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numbers import Number\n",
    "from typing import Tuple, List\n",
    "\n",
    "import matplotlib\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt, colorbar\n",
    "\n",
    "import ensembler.potentials.TwoD as pot2D\n",
    "from ensembler.potentials import OneD as pot\n",
    "from ensembler.potentials._basicPotentials import _potential1DCls, _potential1DClsPerturbed\n",
    "\n",
    "from ensembler.visualisation import plot_layout_settings\n",
    "from ensembler.visualisation import style\n",
    "\n",
    "for key, value in plot_layout_settings.items():\n",
    "    matplotlib.rcParams[key] = value\n",
    "\n",
    "    \n",
    "def plot_2DPotential(V: pot2D._potential2DCls, positions2D: List[Tuple[Number, Number]] = None, title: str = None,\n",
    "                     x_label: str = None, y_label: str = None, space_range: Tuple[Number, Number] = (-10, 10),\n",
    "                     point_resolution: int = 1000, ax=None, show_plot: bool = False, dpi: int = 300,\n",
    "                     cmap=style.qualitative_map) -> (\n",
    "        plt.Figure, plt.Axes, np.array):\n",
    "    # build positions\n",
    "    if (isinstance(positions2D, type(None))):\n",
    "        minX, maxX = min(space_range), max(space_range)\n",
    "        minY, maxY = min(space_range), max(space_range)\n",
    "        \n",
    "        positions = np.linspace(min(space_range), max(space_range), point_resolution)\n",
    "        x_positions, y_positions = np.meshgrid(positions, positions)\n",
    "        positions2D = np.array([x_positions.flatten(), y_positions.flatten()]).T\n",
    "    else:\n",
    "        positions2D = np.array(positions2D)\n",
    "        minX, maxX = min(positions2D[:, 0]), max(positions2D[:, 0])\n",
    "        minY, maxY = min(positions2D[:, 1]), max(positions2D[:, 1])\n",
    "\n",
    "        # landscapes\n",
    "    V_pots = V.ene(positions2D)\n",
    "    \n",
    "    minV, maxV = np.min(V_pots), np.max(V_pots)\n",
    "\n",
    "    V_land = V_pots.reshape([point_resolution, point_resolution])\n",
    "\n",
    "    # make Figure\n",
    "    if (isinstance(ax, type(None))):\n",
    "        fig, ax = plt.subplots(ncols=1, dpi=dpi)\n",
    "    else:\n",
    "        fig = None\n",
    "\n",
    "    surf = ax.imshow(V_land, cmap=cmap, extent=[minX, maxX, minY, maxY])\n",
    "    ax.set_ylim([minY, maxY])\n",
    "    ax.set_xlim([minX, maxX])\n",
    "    \n",
    "    if (isinstance(x_label, type(None))):\n",
    "        ax.set_xlabel(\"x\")\n",
    "    else:\n",
    "        ax.set_xlabel(x_label)\n",
    "\n",
    "    if (isinstance(y_label, type(None))):\n",
    "        ax.set_ylabel(\"y\")\n",
    "    else:\n",
    "        ax.set_ylabel(y_label)\n",
    "\n",
    "    ax.set_xticks(np.linspace(minX, maxX + 1, 3))\n",
    "    ax.set_yticks(np.linspace(minY, maxY + 1, 3))\n",
    "\n",
    "    if (isinstance(title, type(None))):\n",
    "        ax.set_title(\"Potential Landscape\")\n",
    "    else:\n",
    "        ax.set_title(title)\n",
    "\n",
    "    # color bar:\n",
    "    if (not isinstance(fig, type(None))):\n",
    "        cbaxes = fig.add_axes([0.9, 0.1, 0.03, 0.8])\n",
    "        cb = plt.colorbar(surf, fraction=0.046, pad=0.04, cax=cbaxes,\n",
    "                          ticks=list(np.round(np.linspace(minV, maxV, 5), 2)))\n",
    "        cb.set_label(\"V/[kT]\")\n",
    "\n",
    "        fig.tight_layout()\n",
    "\n",
    "        if (show_plot):\n",
    "            fig.show()\n",
    "\n",
    "    return fig, ax, surf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "x_positions, y_positions = np.meshgrid(positions,positions)\n",
    "positions2D = np.array([x_positions.flatten(), y_positions.flatten()]).T\n",
    "\n",
    "plot_2DPotential(V, positions2D )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Double Well Potential\n",
    "The double well is a very nice potential.\n",
    "\n",
    "Functional:\n",
    "\n",
    "$V = \\frac{V_{max}}{b^4}*((-\\frac{a}{2} + r)^2-b^2)^2$\n",
    "\n",
    "\n",
    "first order derivative\n",
    "\n",
    "$\\frac{\\partial V}{\\partial r} = \\frac{V_max}{b^4}*(-2a + 4r)*((-a/2 + r)^2-b^2) $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-3, 3, test_timing_with_points)\n",
    "\n",
    "V = potentials1D.doubleWellPotential(a=0, b=1, Vmax=5)\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions, y_range=[-50,50])\n",
    "\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Four Well Potential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "#phase space\n",
    "positions = np.linspace(0, 10, test_timing_with_points)\n",
    "\n",
    "#build potential\n",
    "V = potentials1D.fourWellPotential(a=1,b=4, c=6, d=8)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\") #visualize\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)\n",
    "#fig.savefig(\"four_well.png\")\n",
    "\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Wave Potential\n",
    "\n",
    "Functional:\n",
    "\n",
    "$A*cos(m*(r + w)) + V_{off}$\n",
    "\n",
    "first derivative:\n",
    "\n",
    "$\\frac{\\partial V}{\\partial r} = -A*m*sin(m*(r + w)) $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "#1D\n",
    "positions = np.linspace(0, 4, test_timing_with_points)\n",
    "\n",
    "V = potentials1D.wavePotential()\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "#2D\n",
    "positions = np.linspace(-180, 180, test_timing_with_points)\n",
    "x_positions, y_positions = np.meshgrid(positions,positions)\n",
    "positions2D = np.array([x_positions.flatten(), y_positions.flatten()]).T\n",
    "\n",
    "V = potentials2D.wavePotential(multiplicity=[2,2], radians=False)\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions2D)\n",
    "\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "plt.imshow(V.ene(positions2D).reshape([test_timing_with_points,test_timing_with_points]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Torsion Potential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "\n",
    "w1 = potentials1D.wavePotential(multiplicity=3)\n",
    "w2 = potentials1D.wavePotential()\n",
    "waves = [w1, w2]\n",
    "\n",
    "V = potentials1D.torsionPotential(wavePotentials=waves)\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lennard Jones Potential\n",
    "\n",
    "Functional:\n",
    "\n",
    "$V = 4e*(\\frac{s^{12}}{(r - r_0)^12} - \\frac{s^6}{(r - r_0)^6}) +  V_{off}$\n",
    "\n",
    "first derivative:\n",
    "\n",
    "$\\frac{\\partial V}{\\partial r} = 4e*(-12*\\frac{s^{12}}{(r - r_0)^13} + 6*\\frac{s^6}{(r - r_0)^7})$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-5, 5, test_timing_with_points)\n",
    "\n",
    "V = potentials1D.lennardJonesPotential()\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, _ = vis.plot_1DPotential(V, positions=positions, y_range=[-5,5])\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Culomb Potential\n",
    "\n",
    "\n",
    "Functional:\n",
    "\n",
    "$V = \\frac{q_1q_2}{(4 \\pi \\epsilon r)}$\n",
    "\n",
    "first derivative:\n",
    "\n",
    "$\\frac{\\partial V}{\\partial r} = \\frac{-q_1q_2}{(4\\pi \\epsilon r^2)}$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-1, 5, test_timing_with_points)\n",
    "\n",
    "V = potentials1D.coulombPotential()\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perturbed/MultiState Potentials"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### linear coupled\n",
    "\n",
    "Functional:\n",
    "\n",
    "$V(r, \\lambda) = \\lambda V_a(r) + (1-\\lambda) V_b(r)$\n",
    "\n",
    "\n",
    "first order derivatives:\n",
    "\n",
    "\n",
    "$\\frac{\\partial V}{\\partial \\lambda} = $\n",
    "\n",
    "$\\frac{\\partial V}{\\partial r} = $\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "\n",
    "w1 = potentials1D.harmonicOscillatorPotential()\n",
    "w2 = potentials1D.harmonicOscillatorPotential(k=11)\n",
    "\n",
    "V = potentials1D.linearCoupledPotentials(Va=w1, Vb=w2)\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "\n",
    "w1 = potentials1D.harmonicOscillatorPotential(k=10, x_shift=-2)\n",
    "w2 = potentials1D.harmonicOscillatorPotential(k=10, x_shift=2)\n",
    "\n",
    "\n",
    "w1 = potentials1D.harmonicOscillatorPotential(k=12, x_shift=-2)\n",
    "w2 = potentials1D.harmonicOscillatorPotential(k=12, x_shift=2)\n",
    "V = potentials1D.linearCoupledPotentials(Va=w1, Vb=w2)\n",
    "\n",
    "lambda_ene = []\n",
    "for lam in np.arange(0, 1, 0.01):\n",
    "    V.lam = lam\n",
    "    lambda_ene.append(V.ene(positions))\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, ax = plt.subplots(ncols=1, figsize=[10,10])\n",
    "mapping = ax.imshow(lambda_ene, extent=[0,100, 0,100], vmin=0, vmax=50)\n",
    "opt_labels = np.array(ax.get_yticks())/100\n",
    "ax.set_yticklabels(opt_labels)\n",
    "opt_labels = np.round(((np.array(ax.get_yticks())/100)*8)-4,2)\n",
    "ax.set_xticklabels(opt_labels)\n",
    "\n",
    "ax.set_ylabel(\"lambda\")\n",
    "ax.set_xlabel(\"r\")\n",
    "cm = plt.colorbar(mapping)\n",
    "cm.set_label(\"V\")\n",
    "fig.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### exponential Copuled - Enveloping Potential\n",
    "\n",
    "\n",
    "Used in EDS\n",
    "\n",
    "Functional:\n",
    "\n",
    "$V(r) = -\\frac{1}{k_b T s} ln(e^{- k_b T s (V_i-E^{off}_i)}+e^{-k_b T s (V_j-E^{off}_j)})$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points*10000)\n",
    "\n",
    "w1 = potentials1D.harmonicOscillatorPotential(x_shift=-2)\n",
    "w2 = potentials1D.harmonicOscillatorPotential(x_shift=2)\n",
    "\n",
    "#print(w1, w2)\n",
    "V = potentials1D.exponentialCoupledPotentials(Va=w1, Vb=w2, s=1, eoffA=0, eoffB=0)\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)\n",
    "plt.show()\n",
    "plt.close()\n",
    "plt.plot(positions, V.ene(positions))\n",
    "plt.plot(positions, w1.ene(positions))\n",
    "plt.plot(positions, w2.ene(positions))\n",
    "\n",
    "\n",
    "plt.ylim([0,2])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### linear & exponential hybrid Copuled - $\\lambda$ EDS\n",
    "\n",
    "Functional:\n",
    "\n",
    "$V(r) = -\\frac{1}{k_b T s} ln(\\lambda e^{- k_b T s (V_i-E^{off}_i)}+(1-\\lambda)e^{-k_b T s (V_j-E^{off}_j)})$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "\n",
    "w1 = potentials1D.harmonicOscillatorPotential(x_shift=-2)\n",
    "w2 = potentials1D.harmonicOscillatorPotential(x_shift=2)\n",
    "\n",
    "V = potentials1D.hybridCoupledPotentials(Va=w1, Vb=w2, lam=0)\n",
    "#print(V)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)\n",
    "\n",
    "#perturbed potentilas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "\n",
    "w1 = potentials1D.harmonicOscillatorPotential(k=12, x_shift=-2)\n",
    "w2 = potentials1D.harmonicOscillatorPotential(k=12, x_shift=2)\n",
    "V = potentials1D.hybridCoupledPotentials(Va=w1, Vb=w2, s=0.1)\n",
    "\n",
    "#ha=harmonicOsc(fc=1.0, x_shift=0.0), hb=harmonicOsc(fc=3.0, x_shift=10.0), s=0.05, temp=300.0\n",
    "\n",
    "lambda_ene = []\n",
    "for lam in np.arange(0, 1.01, 0.01):\n",
    "    V.lam = lam\n",
    "    lambda_ene.append(V.ene(positions))\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, ax = plt.subplots(ncols=1, figsize=[10,10])\n",
    "mapping = ax.imshow(lambda_ene, extent=[0,100, 0,100], vmin=0, vmax=10)\n",
    "opt_labels = np.array(ax.get_yticks())/100\n",
    "ax.set_yticklabels(opt_labels)\n",
    "opt_labels = np.round(((np.array(ax.get_yticks())/100)*8)-4,2)\n",
    "ax.set_xticklabels(opt_labels)\n",
    "\n",
    "ax.set_ylabel(\"lambda\")\n",
    "ax.set_xlabel(\"r\")\n",
    "cm = plt.colorbar(mapping)\n",
    "cm.set_label(\"V\")\n",
    "fig.tight_layout()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-4, 4, test_timing_with_points)\n",
    "\n",
    "w1 = potentials1D.harmonicOscillatorPotential(k=12, x_shift=-2)\n",
    "w2 = potentials1D.harmonicOscillatorPotential(k=12, x_shift=2)\n",
    "V = potentials1D.hybridCoupledPotentials(Va=w1, Vb=w2, s=0.1)\n",
    "\n",
    "\n",
    "points=50\n",
    "lambda_ene = []\n",
    "for lam, s in zip(np.linspace(0, 0.5, points), np.logspace(0, -3,  points)):\n",
    "    V.lam = lam\n",
    "    V.s=s\n",
    "    lambda_ene.append(V.ene(positions))\n",
    "for lam, s in zip(np.linspace(0.51, 1,  points), np.logspace(-3, 0,  points)):\n",
    "    V.lam = lam\n",
    "    V.s=s\n",
    "    lambda_ene.append(V.ene(positions))\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, ax = plt.subplots(ncols=1, figsize=[10,10])\n",
    "mapping = ax.imshow(lambda_ene, extent=[0,100, 0,100], vmin=0, vmax=30)\n",
    "opt_labels = np.array(ax.get_yticks())/100\n",
    "ax.set_yticklabels(opt_labels)\n",
    "opt_labels = np.round(((np.array(ax.get_yticks())/100)*8)-4,2)\n",
    "ax.set_xticklabels(opt_labels)\n",
    "\n",
    "ax.set_ylabel(\"lambda\")\n",
    "ax.set_xlabel(\"r\")\n",
    "cm = plt.colorbar(mapping)\n",
    "cm.set_label(\"V\")\n",
    "fig.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Special Potentials\n",
    "\n",
    "The Gerhard Koenich speciality corner. Here we have some special potential for very special usecases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### dummy Potential\n",
    "\n",
    "This potential returns always the same value independt on its position.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(1,100, test_timing_with_points)\n",
    "\n",
    "V = potentials1D.dummyPotential()\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, axes = vis.plot_1DPotential(V, positions=positions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Flatwell Potential\n",
    "\n",
    "A potential return dependent on a position a value in a binary fashion\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "positions = np.linspace(-10,10, test_timing_with_points)\n",
    "\n",
    "V = potentials1D.flatwellPotential(y_min=0)\n",
    "\n",
    "print(\"calculate \"+str(len(positions))+\" positions: \")\n",
    "%time V.ene(positions)\n",
    "\n",
    "print(\"\\nVisualization\")\n",
    "fig, _ = vis.plot_1DPotential(V, positions=positions, y_range=[-5,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "file_extension": ".py",
  "kernelspec": {
   "display_name": "Python 3.7.7 64-bit ('EnsemblerDev': conda)",
   "language": "python",
   "name": "python37764bitensemblerdevcondaa4593ef55eeb4c19ab962e621795cac3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  },
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
